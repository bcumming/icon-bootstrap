#!/bin/bash

set -eu

printer() {
    echo "==LOG== $1"
}

ICON_DIR="${build_path}/icon-exclaim"
DSL_DIR="${ICON_DIR}/dsl"

echo ""
printer "ICON_DIR   : $ICON_DIR"
printer "DSL_DIR    : $DSL_DIR"
echo ""

#MODULES='nvhpc/23.3 cuda/11.8.0-nvhpc netcdf-c/4.8.1-nvhpc netcdf-fortran/4.5.4-nvhpc cray-mpich-binary/8.1.18.4-nvhpc gcc/11.3.0 eccodes/2.25.0-nvhpc'
#MODULES='nvhpc/21.2-cuda-11.2 cuda/11.2.2 netcdf/4.7.0-nvhpc-21.2-cuda-11.2 netcdf-fortran/4.4.5-nvhpc-21.2-cuda-11.2 openmpi/4.1.0-nvhpc-21.2-cuda-11.2 gcc/8.3.0'


# Requirements
XML2_ROOT="${uenv_view_path}"
XML2_LIBS='-lxml2'

# no serialbox
SERIALBOX2_ROOT=''
SERIALBOX2_LIBS=''
SERIALBOXI=''
SB2PP=''

# eccodes
ECCODES_ROOT="${uenv_view_path}"
ECCODES_LIBS="-leccodes"
ECCODESI="-I${ECCODES_ROOT}/include"

# Mandatory LIBS
BLAS_LAPACK_LIBS='-llapack -lblas'
NETCDF_LIBS='-lnetcdf -lnetcdff'
# The rest of libraries required by CUDA will be provided by PGI compiler:
STDCPP_LIBS='-lstdc++fs -lstdc++'

################################################################################

#BUILD_ENV=". \"${SCRIPT_DIR}/module_switcher\"; module use /apps/common/UES/sandbox/kraushm/tsa-nvhpc/easybuild/modules/all; switch_for_module ${MODULES}; export LD_LIBRARY_PATH=\"${XML2_ROOT}/lib:\${LD_LIBRARY_PATH}\";"
#BUILD_ENV="source /etc/profile.d/lmod.sh ;module use /user-environment/modules; module load ${MODULES}; export LD_LIBRARY_PATH=\"${XML2_ROOT}/lib:\${CUDA_HOME}/lib:\${LD_LIBRARY_PATH}\"; export CC=mpicc; export FC=mpif90; export CXX=mpicxx;"
#BUILD_ENV=". \"${SCRIPT_DIR}/module_switcher\"; module use /mch-environment/v5/modules; switch_for_module ${MODULES}; export LD_LIBRARY_PATH=\"${XML2_ROOT}/lib:\${LD_LIBRARY_PATH}\"; export CC=mpicc; export FC=mpif90; export CXX=mpicxx;"
BUILD_ENV="source ${uenv_view_path}/activate.sh;"


# We need some of the environment variables set by the modules now:
#eval "$BUILD_ENV"

NETCDFFI="-I${uenv_view_path}/include"

CC='mpicc'
CFLAGS='-g -O2'
CPPFLAGS="-I${uenv_view_path}/include/libxml2 -I${uenv_view_path}/include"
CXX='mpicxx'

FC='mpif90'
FCFLAGS="-g -traceback -O -Mrecursive -Mallocatable=03 -acc=verystrict -gpu=cc90 -Mstack_arrays -Minfo=accel,inline ${SERIALBOXI} ${ECCODESI} ${NETCDFFI} -D__SWAPDIM -D__USE_G2G -lnvToolsExt"

#LDFLAGS="-L${CUDA_HOME}/lib64 -L${ECCODES_ROOT}/lib64 -L${XML2_ROOT}/lib -L${NETCDF}/lib -L${NETCDFMINFORTRAN}/lib"
LDFLAGS="-L${uenv_view_path}/lib64 -L${uenv_view_path}/lib"


# ICON executable will be linked to /opt/cray/pe/lib64/libmpichf90_pgi.so.3,
# which depends on libomptarget.so but doesn't have an RPATH to it. For this
# reason, it becomes impossible to run the executable without setting
# LD_LIBRARY_PATH in advance (e.g. by loading an environment module). To solve
# this issue, we overlink to libomptarget.so so that it can be found through
# RPATH entries of the executable, which are injected by the compiler.
LIBS="-L${CUDA_HOME}/lib64 -lcudart -Wl,--as-needed ${XML2_LIBS} ${BLAS_LAPACK_LIBS} ${SERIALBOX2_LIBS} ${STDCPP_LIBS} ${NETCDF_LIBS}"

CUDAARCHS='90'
NVCC='nvcc'
# -G seems to break the build, at least it does on tsa
NVCFLAGS='--std=c++17 -arch=sm_90 -g -O3 -lineinfo'
# gt4py NVCFLAGS need to be frozen, since -I/path/to/external/cub is added for NVCFLAGS in configure, which will break the build for gt4py.
GT4PYNVCFLAGS="$NVCFLAGS"

#MPI_LAUNCH='/apps/daint/UES/xalt/production/bin/srun -p debug -C gpu'
MPI_LAUNCH=false

EXTRA_CONFIG_ARGS='--disable-loop-exchange --disable-ocean --disable-claw --enable-gpu --enable-rte-rrtmgp --enable-ecrad'
#EXTRA_CONFIG_ARGS='--disable-loop-exchange --disable-ocean --disable-claw --enable-gpu --enable-rte-rrtmgp'

# Speed up the configuration by disabling MPI checks:
EXTRA_CONFIG_ARGS+=' --disable-mpi-checks --disable-coupling'

# [DSL] In order to enable DSL verification mode, pass --enable-dsl-verify to this script

if [ -z "${LOC_GT4PY+x}" ]; then
    echo "gt4py path not set."; exit 1;
fi
if [ -z "${LOC_ICON4PY_ATM_DYN_ICONAM+x}" ]; then
    echo "icon4py dycore path not set."; exit 1;
fi
if [ -z "${LOC_ICON4PY_ADVECTION+x}" ]; then
    echo "icon4py advection path not set."; exit 1;
fi
if [ -z "${LOC_ICON4PY_DIFFUSION+x}" ]; then
    echo "icon4py diffusion path not set."; exit 1;
fi
if [ -z "${LOC_ICON4PY_INTERPOLATION+x}" ]; then
    echo "icon4py interpolation path not set."; exit 1;
fi
if [ -z "${LOC_ICON4PY_TOOLS+x}" ]; then
    echo "icon4py tools path not set."; exit 1;
fi
if [ -z "${LOC_ICON4PY_BIN+x}" ]; then
    echo "icon4py binary path not set."; exit 1;
fi
if [ -z "${LOC_GRIDTOOLS+x}" ]; then
    echo "gridtools path not set."; exit 1;
fi

################################################################################
icon_config_log="$(pwd)/log-configure"
printer "configuring icon: ${ICON_DIR}/configure"
printer "             log: ${icon_config_log}"

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CPPFLAGS="$CPPFLAGS" \
CXX="$CXX" \
FC="$FC" \
CUDAARCHS="$CUDAARCHS" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS" \
LIBS="$LIBS" \
MPI_LAUNCH="$MPI_LAUNCH" \
NVCC="$NVCC" \
NVCFLAGS="$NVCFLAGS" \
GT4PYNVCFLAGS="$GT4PYNVCFLAGS" \
SB2PP="$SB2PP" \
LOC_GT4PY="$LOC_GT4PY" \
LOC_ICON4PY_ATM_DYN_ICONAM="$LOC_ICON4PY_ATM_DYN_ICONAM" \
LOC_ICON4PY_ADVECTION="$LOC_ICON4PY_ADVECTION" \
LOC_ICON4PY_DIFFUSION="$LOC_ICON4PY_DIFFUSION" \
LOC_ICON4PY_INTERPOLATION="$LOC_ICON4PY_INTERPOLATION" \
LOC_ICON4PY_TOOLS="$LOC_ICON4PY_TOOLS" \
LOC_ICON4PY_BIN="$LOC_ICON4PY_BIN" \
LOC_GRIDTOOLS="$LOC_GRIDTOOLS" \
${EXTRA_CONFIG_ARGS} \
"$@" > ${icon_config_log} 2>&1

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

echo ""
copy_log="$(pwd)/log-copy"
printer "Copy runscript-related files when building out-of-source"
printer "    log: ${copy_log}"
echo ""
# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*' >> ${copy_log} 2>&1
  ln -sf -t run/ ${ICON_DIR}/run/standard_* >> ${copy_log} 2>&1
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o' >> ${copy_log} 2>&1
  rsync -uavz ${ICON_DIR}/make_runscripts . >> ${copy_log} 2>&1
  ln -sf ${ICON_DIR}/data >> ${copy_log} 2>&1
  ln -sf ${ICON_DIR}/vertical_coord_tables  >> ${copy_log} 2>&1
fi

